from aiogram import Router, F, Bot
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import ReplyKeyboardRemove, Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from keyboards.infobot_inline import info_menu
from states.ask_states import Ask as a
from main import bot

router = Router()

@router.callback_query(lambda call: call.data == 'close')
async def close(query: types.CallbackQuery):
    await query.message.delete()

@router.callback_query(lambda call: call.data == 'back')
async def back(query: types.CallbackQuery):
    await query.message.delete()
    await query.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:", reply_markup=info_menu())

@router.callback_query(lambda call: call.data == 'top_exe')
async def top_executors(query: types.CallbackQuery):
    await query.message.delete()
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?', callback_data='for_what'))
    markup.row(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
    await query.message.answer(f'–¢–æ–ø 5 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n1.[[–ò–ó –ë–î]]\n2.[[–ò–ó –ë–î]]\n3.[[–ò–ó –ë–î]]\
    \n4.[[–ò–ó –ë–î]]\n5.[[–ò–ó –ë–î]]\n--------------------\n–¢–æ–ø 2 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞ —Å—É—Ç–∫–∏:\n\n1.[[–ò–ó –ë–î]]\n2.[[–ò–ó –ë–î]]\
    \n3.[[–ò–ó –ë–î]]', reply_markup=markup.as_markup(resize_keyboard=True))

@router.callback_query(lambda call: call.data == 'for_what')
async def for_what(query: types.CallbackQuery):
    await query.message.delete()
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='top_exe'))
    await query.message.answer(f'–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –ª—É—á—à–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n\n‚≠êÔ∏è–£—á–∞—Å—Ç–≤—É—é—Ç –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\
    \n‚≠êÔ∏è–ï—â–µ —á—Ç–æ-—Ç–æ\n‚≠êÔ∏è–ï—â–µ —á—Ç–æ-—Ç–æ\n‚≠êÔ∏è–ï—â–µ —á—Ç–æ-—Ç–æ\n‚≠êÔ∏è–ï—â–µ —á—Ç–æ-—Ç–æ', reply_markup=markup.as_markup(resize_keyboard=True))

@router.callback_query(lambda call: call.data == 'dev')
async def dev(query: types.CallbackQuery):
    await query.message.delete()
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
    await query.message.answer(f'–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\nüë®‚Äçüíª @X_0x69\n–ò —á—É—Ç—å-—á—É—Ç—å\nüë®‚Äçüíª@xyzMoore ',\
                               reply_markup=markup.as_markup(resize_keyboard=True))

@router.callback_query(lambda call: call.data == 'question_from_user')
async def ask_from_user(query: types.CallbackQuery):
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='–î–∞', callback_data='confirm_question'),\
               types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='back'))
    await query.message.delete()
    await query.message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ?', reply_markup=markup.as_markup(resize_keyboard=True))

@router.callback_query(lambda call: call.data =='confirm_question')
async def new_ask_yes(query: types.CallbackQuery, state: FSMContext):
    await query.message.delete()
    await state.set_state(a.start_ask)
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:')

@router.message(state=a.start_ask)
async def sendtosupport(message: Message, state: FSMContext):
    m_id = message.message_id
    username = message.from_user.username
    user_id = message.from_user.id
    await state.set_state(a.send_ask)
    await state.update_data(ask=message.text)
    question = message.text
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'question_to_support {m_id} {user_id}'))
    await bot.send_message(chat_id='-1001684049768', text=f'–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n@{username}\n{question}',\
                        reply_markup=markup.as_markup(resize_keyboard=True))
    await message.answer(f'–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')

@router.callback_query(lambda call: 'question_to_support' in call.data)
async def answerforuser(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    data = query.data.split()
    await state.update_data(question_user_id=data)
    await state.set_state(a.answer_for_user)

@router.message(state=a.answer_for_user)
async def func1(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['question_user_id'][-1]
    user_answer = data['question_user_id']
    m_id = user_answer[1]
    try:
        await bot.send_message(chat_id=user_id, text=f'–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏\n '
                                                     f'–û—Ç–≤–µ—Ç –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text}', reply_to_message_id=int(m_id))
    except TelegramBadRequest:
        await bot.send_message(chat_id=user_id, text=f'–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏\n '
                                                     f'–û—Ç–≤–µ—Ç –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text}')


