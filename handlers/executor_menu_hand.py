import random

from aiogram import Router, F
from aiogram import types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data import Data
from orders_info.orders import Order
from keyboards.client_inline import telegram
from keyboards.client_kb import main_menu, exercise_menu
from states.executor_states import Executor


router = Router()
data = Data()
bot = data.get_bot()

router.message.filter(state=Executor)  # –ü–æ—Å–ª–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ Executor
order = Order()


@router.message((F.text == "–¢–µ–ª–µ–≥—Ä–∞–º"))
async def info(message: Message):
    await message.answer(f"–í—Å–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–∏–Ω–∏—è", reply_markup=await telegram(message, 'executor'))


@router.message((F.text == "–î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è"))
async def info(message: Message):
    markup = InlineKeyboardBuilder()
    markup.row(types.InlineKeyboardButton(text='–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', callback_data='perform_other_tasks'))
    await message.answer(f"–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑—á–∏–∫—É.\n\n"
        f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–º, –≤–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞–Ω–∏–µ–º.\n"
        f"–¢–∞–∫–∂–µ –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É."
        f" –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Å–ø–æ—Ä—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=markup.as_markup(resize_keyboard=True))


@router.message((F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
async def info(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é..", reply_markup=await main_menu(message.from_user.id))


@router.callback_query(lambda call: 'executor' in call.data and 'channel' in call.data)
async def add_telegram(query: types.CallbackQuery, state: FSMContext):
    orders_for_user = await order.order_to_be_executed(query.from_user.id, 'channel')  # –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
    if orders_for_user is not None:
        markup = InlineKeyboardBuilder()
        markup.button(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å', url=orders_for_user['link'])
        markup.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=f'check_execution {orders_for_user["_id"]}')
        markup.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'next_channel')
        markup.button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data=f'back_to_executor_menu')
        markup.adjust(1, 1, 1, 1)
        await query.message.answer('–ó–∞–¥–∞–Ω–∏–µ: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"\n\n'
                                   f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {orders_for_user["click_price"]}\n\n'
                                   '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"', reply_markup=markup.as_markup())
    else:
        await query.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞–Ω–∏—è–º!')


@router.callback_query(lambda call: 'check_execution' in call.data)
async def add_telegram(query: types.CallbackQuery, state: FSMContext):
    data = query.data.split()
    print(data)
    order_id = data[-1]
    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è,
    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫—Å—Ç –Ω–æ–≤—Å—Ç—å–± –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await query.message.delete()
    await order.add_complete_order(query.from_user.id, order_id)
    orders_for_user = await order.order_to_be_executed(query.from_user.id,
                                                       'channel')  # –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
    if orders_for_user is not None:
        markup = InlineKeyboardBuilder()
        markup.button(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å', url=orders_for_user['link'])
        markup.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=f'check_execution {orders_for_user["_id"]}')
        markup.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'next_channel')
        markup.button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data=f'back_to_executor_menu')
        markup.adjust(1, 1, 1, 1)
        await query.message.answer('–ó–∞–¥–∞–Ω–∏–µ: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"\n\n'
                                   f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {orders_for_user["click_price"]}\n\n'
                                   '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"', reply_markup=markup.as_markup())
    else:
        await query.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞–Ω–∏—è–º!')


@router.callback_query(lambda call: 'next_channel' in call.data)
async def add_telegram(query: types.CallbackQuery, state: FSMContext):
    await query.message.delete()
    orders_for_user = await order.order_to_be_executed(query.from_user.id,
                                                       'channel')  # –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
    if orders_for_user is not None:
        markup = InlineKeyboardBuilder()
        markup.button(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å', url=orders_for_user['link'])
        markup.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=f'check_execution {orders_for_user["_id"]}')
        markup.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'next_channel')
        markup.button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data=f'back_to_executor_menu')
        markup.adjust(1, 1, 1, 1)
        await query.message.answer('–ó–∞–¥–∞–Ω–∏–µ: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"\n\n'
                                   f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {orders_for_user["click_price"]}\n\n'
                                   '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"', reply_markup=markup.as_markup())
    else:
        await query.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞–Ω–∏—è–º!')


@router.callback_query(lambda call: 'executor' in call.data and 'post' in call.data)
async def add_telegram(query: types.CallbackQuery, state: FSMContext):
    orders_for_user = await order.order_to_be_executed(query.from_user.id, 'post')
    if orders_for_user is not None:
        await query.message.delete()
        link = int(orders_for_user['link'])
        tg_id = orders_for_user['telegram_ID']
        await bot.forward_message(chat_id=query.from_user.id, from_chat_id=tg_id, message_id=link)
        markup = InlineKeyboardBuilder()
        markup.button(text=f'–Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª', callback_data=f'i_looked {orders_for_user["_id"]}')
        await query.message.answer(f'–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç', reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        await query.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ—Å—Ç–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞–Ω–∏—è–º!')

@router.callback_query(lambda call: 'i_looked' in call.data)
async def i_looked(query: types.CallbackQuery):
    callback = query.data.split()
    order_id = callback[-1]
    user_id = query.message.from_user.id
    role = 'executor'
    await query.message.delete()
    #–∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ
    markup = InlineKeyboardBuilder()
    markup.button(text='–î–∞', callback_data=f'{role} {user_id} post')
    markup.button(text=f'–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_executor_menu')
    markup.adjust(1, 1)
    await query.message.answer(f'–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç?', reply_markup=markup.as_markup(resize_keyboard=True))


@router.callback_query(lambda call: call.data == 'perform_other_tasks')
async def perform_other_tasks(query: types.CallbackQuery):
    await query.message.delete()
    orders_for_user = await order.order_to_be_executed(query.from_user.id, 'other')
    if orders_for_user is not None:
        markup = InlineKeyboardBuilder()
        markup.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', callback_data=f'send_result_for_check {orders_for_user["_id"]}')
        markup.button(text='–ñ–∞–ª–æ–±–∞', callback_data='report')
        markup.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='next_other_tasks')
        markup.button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_executor_menu')
        markup.adjust(1, 2, 1)
        await query.message.answer(f'–ó–∞–¥–∞–Ω–∏–µ: {orders_for_user["title"]}\n'
                                   f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {orders_for_user["click_price"]}\n'
                                   f'---------------\n'
                                   f'‚úÖ–ü—Ä–∏–Ω—è—Ç–æ:[[–î–æ–±–∞–≤–∏—Ç—å –≤ –±–¥]]\n'
                                   f'‚ùå–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: [[–î–æ–±–∞–≤–∏—Ç—å –≤ –±–¥]]\n'
                                   f'üò°–ñ–∞–ª–æ–±: [[–î–æ–±–∞–≤–∏—Ç—å –≤ –±–¥]]\n'
                                   f'---------------\n'
                                    f'–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n'
                                   f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {orders_for_user["description"]}\n\n'
                                   f'URL-—Ä–µ—Å—É—Ä—Å: {orders_for_user["link"]} (–ø–µ—Ä–µ–π—Ç–∏)\n\n'
                                   f'‚ö†Ô∏è–ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º!',
                                   reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        await query.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞–Ω–∏—è–º!')

@router.callback_query(lambda call: 'send_result_for_check' in call.data)
async def send_result(query: types.CallbackQuery, state: FSMContext):
    info = query.data.split()
    await state.set_state(Executor.sending_result)
    await state.update_data(order_id=info[-1])
    await query.message.answer(f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –≤–∞–º–∏ —Ä–∞–±–æ—Ç—ã (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)\n')

@router.message(state=Executor.sending_result)
async def confirm_result(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    info = await state.get_data()
    order_info = await order.get_order_info(order_id=info['order_id'])
    id = order_info['telegram_ID']
    text = info['text']
    await bot.send_message(chat_id=id, text=f'–í–∞–º –ø—Ä–∏—à–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {order_info["title"]}\n'
                                            f'–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {text}')
    await state.clear()
    await message.answer(f'–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')

@router.callback_query(lambda call: call.data == 'next_other_tasks')
async def next_task(query: types.CallbackQuery):
    await query.message.delete()
    orders_for_user = await order.order_to_be_executed(query.from_user.id, 'other')
    if orders_for_user is not None:
        markup = InlineKeyboardBuilder()
        markup.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', callback_data=f'send_result_for_check {orders_for_user["_id"]}')
        markup.button(text='–ñ–∞–ª–æ–±–∞', callback_data='report')
        markup.button(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='next_other_tasks')
        markup.button(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_executor_menu')
        markup.adjust(1, 2, 1)
        await query.message.answer(f'–ó–∞–¥–∞–Ω–∏–µ: {orders_for_user["title"]}\n'
                                   f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {orders_for_user["click_price"]}\n'
                                   f'---------------\n'
                                   f'‚úÖ–ü—Ä–∏–Ω—è—Ç–æ:[[–î–æ–±–∞–≤–∏—Ç—å –≤ –±–¥]]\n'
                                   f'‚ùå–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: [[–î–æ–±–∞–≤–∏—Ç—å –≤ –±–¥]]\n'
                                   f'üò°–ñ–∞–ª–æ–±: [[–î–æ–±–∞–≤–∏—Ç—å –≤ –±–¥]]\n'
                                   f'---------------\n'
                                   f'–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n'
                                   f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {orders_for_user["description"]}\n\n'
                                   f'URL-—Ä–µ—Å—É—Ä—Å: {orders_for_user["link"]} (–ø–µ—Ä–µ–π—Ç–∏)\n\n'
                                   f'‚ö†Ô∏è–ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º!',
                                   reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        await query.message.answer('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞–Ω–∏—è–º!')

@router.callback_query(lambda call: call.data == 'back_to_executor_menu')
async def back_to_executor_menu(query: types.CallbackQuery):
    await query.message.delete()
    await query.message.answer(f'–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', reply_markup=exercise_menu())